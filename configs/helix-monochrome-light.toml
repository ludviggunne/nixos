# Template document for helix color schemes
# See also: https://docs.helix-editor.com/themes.html
#
# NOTE: Keys default to the most specific parent value.
#       e.g ui.cursor.primary > ui.cursor > ui



# GENERAL ==============================

"warning" = { fg = "yellow" } # Editor warnings.
"error" = { fg = "red" } # Editor errors, like mis-typing a command.
"info" = { fg = "black" } # Contextual info in diagnostic messages (LSP).
"hint" = { fg = "black" } # Code diagnostics hints (LSP).
"diagnostic" = { fg = "red" } # Code diagnostics in editing area (LSP).

# UI ==============================
# For styling helix itself.

"ui.background" = {} # Default background color.
"ui.window" = { fg = "black" } # Window border between splits.
"ui.gutter" = { fg = "black" } # Left gutter for diagnostics and breakpoints.

"ui.popup.info" = { fg = "black" }

"ui.text" = { fg = "black" } # Default text color.
"ui.text.focus" = { modifiers = ["bold"] } # Selection highlight in buffer-picker or file-picker.
"ui.text.info" = { fg = "black" } # Info popup contents (space mode menu).

"ui.cursor" = { bg = "grayb" } # Fallback cursor colour, non-primary cursors when there are multiple (shift-c).
# "ui.cursor.primary" = { } # The primary cursor when there are multiple (shift-c).
"ui.cursor.insert" = { fg = "black" } # The cursor in insert mode (i).
# "ui.cursor.select" = { } # The cursor in select mode (v).
# "ui.cursor.match" = { } # The matching parentheses of that under the cursor.

"ui.selection" = { bg = "gray9" } # All currently selected text.
# "ui.selection.primary" = { } # The primary selection when there are multiple.

"ui.linenr" = { fg = "gray5" } # Line numbers.
"ui.linenr.selected" = { fg = "black", modifiers = [ "bold" ] } # Current line number.

"ui.virtual" = { } # Namespace for additions to the editing area.
"ui.virtual.ruler" = { } # Vertical rulers (colored columns in editing area).
"ui.virtual.whitespace" = { } # Whitespace markers in editing area.

"ui.statusline" = { fg = "black" } # Status line.
"ui.statusline.active" = { fg = "black", modifiers = ["bold"] } # Status line in focused windows.
# "ui.statusline.inactive" = { } # Status line in unfocused windows.
# "ui.statusline.normal" = { } # Statusline mode during normal mode (only if editor.color-modes is enabled)
# "ui.statusline.insert" = { } # Statusline mode during insert mode (only if editor.color-modes is enabled)
# "ui.statusline.select" = { } # Statusline mode during select mode (only if editor.color-modes is enabled)

"ui.help" = { fg = "black" } # `:command` descriptions above the command line.

"ui.highlight" = { modifiers = [ "bold" ] } # selected contents of symbol pickers (spc-s, spc-S) and current line in buffer picker (spc-b).

"ui.menu" = {} # Autocomplete menu.
"ui.menu.selected" = { bg = "gray1" } # Selected autocomplete item.

"ui.popup" = { fg = "black" } # Documentation popups (space-k).
# "ui.popup.info" = { } # Info popups box (space mode menu).


# SYNTAX HIGHLIGHTING ==============================
# All the keys here are Treesitter scopes.

# "property" = { } # Regex group names.
# "special" = { } # Special symbols e.g `?` in Rust, `...` in Hare.
# "attribute" = { } # Class attributes, html tag attributes.

# "type" = { fg = "white", modifiers = ["bold"] } # Variable type, like integer or string, including program defined classes, structs etc..
# "type.builtin" = { } # Primitive types of the language (string, int, float).
# "type.enum.variant" = { } # A variant of an enum.

# "constructor" = { } # Constructor method for a class or struct.

# "constant" = { fg = "graye" } # Constant value
# "constant.builtin" = { } # Special constants like `true`, `false`, `none`, etc.
# "constant.builtin.boolean" = { } # True or False.
# "constant.character" = { } # Constant of character type.
# "constant.character.escape" = { } # escape codes like \n.
# "constant.numeric"  = { } # constant integer or float value.
# "constant.numeric.integer" = { } # constant integer value.
# "constant.numeric.float" = { } # constant float value.

# "string" = { fg = "graya" } # String literal.
# "string.regexp" = { } # Regular expression literal.
# "string.special" = { } # Strings containing a path, URL, etc.
# "string.special.path" = { } # String containing a file path.
# "string.special.url" = { fg = "blue" } # String containing a web URL.
# "string.special.symbol" = { } # Erlang/Elixir atoms, Ruby symbols, Clojure keywords.

# "comment" = { modifiers = [ "italic" ] } # This is a comment.
# "comment.line" = { } # Line comments, like this.
# "comment.block" = { } # Block comments, like /* this */ in some languages.
# "comment.block.documentation" = { } # Doc comments, e.g "///" in rust.

# "variable" = { fg = "graye" } # Variable names.
# "variable.builtin" = { } # Language reserved variables: `this`, `self`, `super`, etc.
# "variable.parameter" = { } # Function parameters.
# "variable.other.member" = { } # Fields of composite data types (e.g. structs, unions).

# "label" = { } # Loop labels, among other things.

# "punctuation" = { } # Any punctuation symbol.
# "punctuation.delimiter" = { } # Commas, colons or other delimiter depending on the language.
# "punctuation.bracket" = { } # Parentheses, angle brackets, etc.

# "keyword" = { fg = "white", modifiers = ["bold"] } # Language reserved keywords.
# "keyword.control" = { } # Control keywords.
# "keyword.control.conditional" = { } # `if`, `else`, `elif`.
# "keyword.control.repeat" = { } # `for`, `while`, `loop`.
# "keyword.control.import" = { } # `import`, `export` `use`.
# "keyword.control.return" = { } # `return` in most languages.
# "keyword.control.exception" = { } # `try`, `catch`, `raise`/`throw` and related.
# "keyword.operator" = { } # `or`, `and`, `in`.
# "keyword.directive" = { fg = "white", modifiers = [] } # Preprocessor directives (#if in C...).
# "keyword.function" = { } # The keyword to define a function: "def", "fun", "fn".

# "operator" = { } # Logical, mathematical, and other operators.

# "function" = { fg = "graye" }
# "function.builtin" = { }
# "function.method" = { } # Class / Struct methods.
# "function.macro" = { modifiers = ["bold"] }
# "function.special" = { } # Preprocessor function in C.

# "tag" = { } # As in <body> for html, css tags.
# "tag.error" = { } # Erroneous closing html tags.

# "namespace" = { } # Namespace or module identifier.


# Markup ==============================
# Colors for markup languages, like Markdown or XML.

# "markup.heading.1" = { } # Markdown heading 1 color.
# "markup.heading.2" = { } # Markdown heading 2 color.
# "markup.heading.3" = { } # Markdown heading 3 color.
# "markup.heading.4" = { } # Markdown heading 4 color.
# "markup.heading.5" = { } # Markdown heading 5 color.
# "markup.heading.6" = { } # Markdown heading 6 color.
# "markup.heading.marker" = { } # Hashtag color on Markdown headings.

# "markup.list" = { }
# "markup.list.numbered" = { } # Numbered list.
# "markup.list.unnumbered" = { } # Bullet point list.

# "markup.bold" = { } # Bold text.
# "markup.italic" = { } # Italicised text.

# "markup.link" = { }
# "markup.link.url" = { } # Urls pointed to by links.
# "markup.link.label" = { } # Non-URL link references.
# "markup.link.text" = { } # URL and image descriptions in links.

# "markup.quote" = { } # `> Quotes` in Markdown.


# Markup - Interface ==============================
# "These scopes are used for theming the editor interface."

# "markup.normal" = { }
# "markup.normal.completion" = { } # For completion doc popup ui.
# "markup.normal.raw" = { } # For hover popup ui.

# "markup.heading.completion" = { } # Headings for completion doc popup ui.
# "markup.heading.raw" = { } # Headings for hover popup ui.

# "markup.raw" = { } # Code block in Markdown.
# "markup.raw.block" = { } # Multiline (```) codeblock in Markdown.
# "markup.raw.inline" = { } # `Inline code block` in Markdown.
# "markup.raw.inline.completion" = { } # ?
# "markup.raw.inline.hover" = { } # ?

# Diff ==============================
# Version control changes.

"diff.plus" = { fg = "green" } # Additions.
"diff.minus" = { fg = "red" } # Deletions.
"diff.delta" = { fg = "graye" } # Modifications.
"diff.delta.moved" = { fg = "blue" } # Renamed or moved files.


[palette] # Define your custom colors here.
white = "#ffffff"
graye = "#efefef"
grayd = "#dfdfdf"
grayc = "#cfcfcf"
grayb = "#bfbfbf"
graya = "#afafaf"
gray9 = "#9f9f9f"
gray8 = "#8f8f8f"
gray7 = "#7f7f7f"
gray6 = "#6f6f6f"
gray5 = "#5f5f5f"
gray4 = "#4f4f4f"
gray3 = "#3f3f3f"
gray2 = "#2f2f2f"
gray1 = "#1f1f1f"
gray0 = "#161616"
black = "#0f0f0f"
red = "#ff4343"
green = "#a0ffa0"
blue = "#a0a0ff"
yellow = "#8f8f00"

